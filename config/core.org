#+title: Core Config
#+author: Pratik Abhyankar

* Completions
** Which Key
Make Emacs prompt the next possible key bindings after a short while. I rely on
this a lot. Like.. a lot!
#+begin_src elisp
  (use-package which-key
    :ensure t
    :config
    (setq which-key-add-column-padding 1
          which-key-sort-uppercase-first nil
          which-key-show-early-on-C-h t
          which-key-idle-delay 1.0
          which-key-idle-secondary-delay 0.05)
    (which-key-mode))
#+end_src

** Ivy, Counsel and Swiper
My de-facto generic completion for Emacs. I don't do ~helm~, ~ido~ or ~vertico~;
please don't ask why.
*** Ivy
~ivy~ will setup the completion mechanism and enhance buffer switching.
#+begin_src elisp
  (use-package ivy
    :config
    (ivy-mode t)
    (setq ivy-use-virtual-buffers t
          ivy-count-format "(%d/%d) "
          ivy-initial-inputs-alist nil
          enable-recursive-minibuffers t)
    :bind (("C-x b" . ivy-switch-buffer)
           ("C-x B" . ivy-switch-buffer-other-window)
           ("C-c C-r" . ivy-resume)))
#+end_src

*** Swiper
The search mechanism that Emacs makes so so powerful!
#+begin_src elisp
  (use-package swiper
    :bind (("C-s" . swiper-isearch)
           ("C-M-s" . isearch-forward-regexp)
           ("C-M-r" . isearch-backwards-regexp)))
#+end_src

*** Counsel
~counsel~ enhances many default Emacs commands. I do not bind ~M-x~ to ~counsel-M-x~
since I use ~amx~ for that!
#+begin_src elisp
  (use-package counsel
    :bind (("C-x C-f" . counsel-find-file)
           ("C-c '" . counsel-imenu)
           ("C-c s" . counsel-rg)
           :map counsel-find-file-map
           ("RET" . ivy-alt-done)))
#+end_src

*** Ivy-rich
Makes ~ivy~ richer in completion by displaying helpful metadata on ~ivy~ and ~counsel~
commands. Since I also use ~all-the-icons-ivy-rich~ package that I load from the
[[file:appearance.org][appearance.org]] literate config file, I install and enable ~ivy-rich~ after that
package has loaded to avoid performance issues.
#+begin_src elisp
  (use-package ivy-rich
    :init
    (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line)
    (setq ivy-rich-path-style 'abbrev)
    :after counsel-projectile all-the-icons-ivy-rich
    :config
    (ivy-rich-mode t))
#+end_src

** Recentf
Remember thy master's commands!
#+begin_src elisp
  (use-package recentf
    :config
    (setq recentf-auto-cleanup 'never
          recentf-max-saved-items 50
          recentf-save-file RECENTF-FILE)
    (recentf-mode t)
    :bind("C-x C-r" . recentf-open-files))
#+end_src

** Amx
~Amx~ is an alternative interface for ~M-x~ in Emacs. It is forked from [[https://github.com/nonsequitur/smex][smex]] since it
was no longer maintained and changed quite a bit. It automatically works with
the completion package under use like ~Ivy~, ~Ido~ or ~Helm~.
#+begin_src elisp
  (use-package amx
    :ensure t
    :config
    (setq amx-save-file AMX-ITEMS-FILE)
    (amx-mode t))
#+end_src

** Company
Completion at point for literally anything and everything in Emacs. I install
mode specific ~company-backend~ in their respective 'mode' config files. Here I
just setup company and its complementary packages.
#+begin_src elisp
  (use-package company
    :bind (:map
           global-map
           ("TAB" . company-complete-common-or-cycle)
           :map company-active-map
           ("C-n" . company-select-next)
           ("C-p" . company-select-previous))
    :config
    (setq company-ide-delay 0.05)
    (setq company-backends '(company-capf company-files company-yasnippet))
    (setq company-minimum-prefix-length 1)
    (global-company-mode t))
#+end_src

* Buffers
** Ibuffer
Make ~ibuffer~ the default buffer manager. Also, I don't want to see the buffers
that start with '*' such as ~*scratch*~ or ~*Messages*~ in the list, so I hide them.
#+begin_src elisp
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer))
  (require 'ibuf-ext)
  (add-to-list 'ibuffer-never-show-predicates "^\\*")
#+end_src

** Ace-window
This makes it easy for me to switch between different windows. Nusta zaap-zup!
#+begin_src elisp
  (use-package ace-window
    :bind ("M-o" . ace-window))
#+end_src

* Editing
** Electric
Teach Emacs some code-editing etiquette. I.. shouldn't have said that. Please
don't frown upon me!
#+begin_src elisp
  (delete-selection-mode)
  (electric-pair-mode 1)
#+end_src

** Undo Tree
Well.. this does undo redo. I don't like that it creates hidden ~~undotree~~ files
for every buffer, but I don't know how to disable that yet.
#+begin_src elisp
  (use-package undo-tree
    :config
    (global-undo-tree-mode t))
#+end_src

** Ws-butler
~ws-butler~ helps trim all white spaces at the end of line. I didn't know about
this until I saw it in [[https://github.com/mtbar131/emacs/blob/master/custom/setup-editing.el][Amit's]] config!
#+begin_src elisp
  (use-package ws-butler
    :config
    (ws-butler-global-mode t))
#+end_src


** Expand Region
God-like tool! Allows me to progressively mark and expand region.
#+begin_src elisp
  (use-package expand-region
    :bind ("C-=" . er/expand-region))
#+end_src

* Searching and Sorting
** Avy
~Avy~ is a go-to char utility similar to ~ace-jump~ but a little better! Allows me
to jump to any character/word on the visible buffer.
#+begin_src elisp
  (use-package avy
    :bind (("C-;" . avy-goto-char)
           ("C-:" . avy-goto-line)))
#+end_src
